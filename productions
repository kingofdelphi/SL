precedence ranklist in ascending order
---------------------------------------------------------------------------------
1. ,    separates expression
2. =    separates lexp 
3. <    separates simple_expression
4. + -  separates terms
5. * /  separates atoms or factors

PRODUCTIONS, ($ is the end of input)
---------------------------------------------------------------------------------

expressionSet => expression {, expression}
delimited by: EOF EOL $ )
remark: any number of comma separated expressions with at least one expression

expression => identifier=expression | lexp (right associative)
delimited by: EOL EOF $ ) ,

lexp => simple_expression {< simple_expression}
delimited by: EOF EOL } $ ) = ,

simple_expression => T [ (+ | -) T]*
delimited by: EOF EOL $ ) = , <

T => F [ (* | /) F]*
delimited by: EOL EOF - + , ) = $ <

F => (+| -) F | identifier | constant | (expressionset)
delimited by: just read one token, so delimited by all other tokens

matched_block => { block }
delimited by => EOF

block => [statement EOL]*  
delimited by: } EOF
remark: sequence of statements [can be empty]

statement => if statement
statement => lexp
delimited by: EOL }
